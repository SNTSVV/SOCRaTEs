/**
 * generated by Xtext 2.17.0.M1
 */
package lu.snt.socrates.impl;

import lu.snt.socrates.SocratesPackage;
import lu.snt.socrates.Tvariable;
import lu.snt.socrates.boundterm;
import lu.snt.socrates.timedterm;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>boundterm</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link lu.snt.socrates.impl.boundtermImpl#getRef <em>Ref</em>}</li>
 *   <li>{@link lu.snt.socrates.impl.boundtermImpl#getL <em>L</em>}</li>
 *   <li>{@link lu.snt.socrates.impl.boundtermImpl#getLeftbound <em>Leftbound</em>}</li>
 *   <li>{@link lu.snt.socrates.impl.boundtermImpl#getRightbound <em>Rightbound</em>}</li>
 *   <li>{@link lu.snt.socrates.impl.boundtermImpl#getR <em>R</em>}</li>
 * </ul>
 *
 * @generated
 */
public class boundtermImpl extends MinimalEObjectImpl.Container implements boundterm
{
  /**
   * The cached value of the '{@link #getRef() <em>Ref</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRef()
   * @generated
   * @ordered
   */
  protected Tvariable ref;

  /**
   * The default value of the '{@link #getL() <em>L</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getL()
   * @generated
   * @ordered
   */
  protected static final String L_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getL() <em>L</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getL()
   * @generated
   * @ordered
   */
  protected String l = L_EDEFAULT;

  /**
   * The cached value of the '{@link #getLeftbound() <em>Leftbound</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLeftbound()
   * @generated
   * @ordered
   */
  protected timedterm leftbound;

  /**
   * The cached value of the '{@link #getRightbound() <em>Rightbound</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRightbound()
   * @generated
   * @ordered
   */
  protected timedterm rightbound;

  /**
   * The default value of the '{@link #getR() <em>R</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getR()
   * @generated
   * @ordered
   */
  protected static final String R_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getR() <em>R</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getR()
   * @generated
   * @ordered
   */
  protected String r = R_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected boundtermImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return SocratesPackage.Literals.BOUNDTERM;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Tvariable getRef()
  {
    return ref;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetRef(Tvariable newRef, NotificationChain msgs)
  {
    Tvariable oldRef = ref;
    ref = newRef;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, SocratesPackage.BOUNDTERM__REF, oldRef, newRef);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setRef(Tvariable newRef)
  {
    if (newRef != ref)
    {
      NotificationChain msgs = null;
      if (ref != null)
        msgs = ((InternalEObject)ref).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - SocratesPackage.BOUNDTERM__REF, null, msgs);
      if (newRef != null)
        msgs = ((InternalEObject)newRef).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - SocratesPackage.BOUNDTERM__REF, null, msgs);
      msgs = basicSetRef(newRef, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SocratesPackage.BOUNDTERM__REF, newRef, newRef));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getL()
  {
    return l;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setL(String newL)
  {
    String oldL = l;
    l = newL;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SocratesPackage.BOUNDTERM__L, oldL, l));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public timedterm getLeftbound()
  {
    return leftbound;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetLeftbound(timedterm newLeftbound, NotificationChain msgs)
  {
    timedterm oldLeftbound = leftbound;
    leftbound = newLeftbound;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, SocratesPackage.BOUNDTERM__LEFTBOUND, oldLeftbound, newLeftbound);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setLeftbound(timedterm newLeftbound)
  {
    if (newLeftbound != leftbound)
    {
      NotificationChain msgs = null;
      if (leftbound != null)
        msgs = ((InternalEObject)leftbound).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - SocratesPackage.BOUNDTERM__LEFTBOUND, null, msgs);
      if (newLeftbound != null)
        msgs = ((InternalEObject)newLeftbound).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - SocratesPackage.BOUNDTERM__LEFTBOUND, null, msgs);
      msgs = basicSetLeftbound(newLeftbound, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SocratesPackage.BOUNDTERM__LEFTBOUND, newLeftbound, newLeftbound));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public timedterm getRightbound()
  {
    return rightbound;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetRightbound(timedterm newRightbound, NotificationChain msgs)
  {
    timedterm oldRightbound = rightbound;
    rightbound = newRightbound;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, SocratesPackage.BOUNDTERM__RIGHTBOUND, oldRightbound, newRightbound);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setRightbound(timedterm newRightbound)
  {
    if (newRightbound != rightbound)
    {
      NotificationChain msgs = null;
      if (rightbound != null)
        msgs = ((InternalEObject)rightbound).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - SocratesPackage.BOUNDTERM__RIGHTBOUND, null, msgs);
      if (newRightbound != null)
        msgs = ((InternalEObject)newRightbound).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - SocratesPackage.BOUNDTERM__RIGHTBOUND, null, msgs);
      msgs = basicSetRightbound(newRightbound, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SocratesPackage.BOUNDTERM__RIGHTBOUND, newRightbound, newRightbound));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getR()
  {
    return r;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setR(String newR)
  {
    String oldR = r;
    r = newR;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SocratesPackage.BOUNDTERM__R, oldR, r));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case SocratesPackage.BOUNDTERM__REF:
        return basicSetRef(null, msgs);
      case SocratesPackage.BOUNDTERM__LEFTBOUND:
        return basicSetLeftbound(null, msgs);
      case SocratesPackage.BOUNDTERM__RIGHTBOUND:
        return basicSetRightbound(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case SocratesPackage.BOUNDTERM__REF:
        return getRef();
      case SocratesPackage.BOUNDTERM__L:
        return getL();
      case SocratesPackage.BOUNDTERM__LEFTBOUND:
        return getLeftbound();
      case SocratesPackage.BOUNDTERM__RIGHTBOUND:
        return getRightbound();
      case SocratesPackage.BOUNDTERM__R:
        return getR();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case SocratesPackage.BOUNDTERM__REF:
        setRef((Tvariable)newValue);
        return;
      case SocratesPackage.BOUNDTERM__L:
        setL((String)newValue);
        return;
      case SocratesPackage.BOUNDTERM__LEFTBOUND:
        setLeftbound((timedterm)newValue);
        return;
      case SocratesPackage.BOUNDTERM__RIGHTBOUND:
        setRightbound((timedterm)newValue);
        return;
      case SocratesPackage.BOUNDTERM__R:
        setR((String)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case SocratesPackage.BOUNDTERM__REF:
        setRef((Tvariable)null);
        return;
      case SocratesPackage.BOUNDTERM__L:
        setL(L_EDEFAULT);
        return;
      case SocratesPackage.BOUNDTERM__LEFTBOUND:
        setLeftbound((timedterm)null);
        return;
      case SocratesPackage.BOUNDTERM__RIGHTBOUND:
        setRightbound((timedterm)null);
        return;
      case SocratesPackage.BOUNDTERM__R:
        setR(R_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case SocratesPackage.BOUNDTERM__REF:
        return ref != null;
      case SocratesPackage.BOUNDTERM__L:
        return L_EDEFAULT == null ? l != null : !L_EDEFAULT.equals(l);
      case SocratesPackage.BOUNDTERM__LEFTBOUND:
        return leftbound != null;
      case SocratesPackage.BOUNDTERM__RIGHTBOUND:
        return rightbound != null;
      case SocratesPackage.BOUNDTERM__R:
        return R_EDEFAULT == null ? r != null : !R_EDEFAULT.equals(r);
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (l: ");
    result.append(l);
    result.append(", r: ");
    result.append(r);
    result.append(')');
    return result.toString();
  }

} //boundtermImpl

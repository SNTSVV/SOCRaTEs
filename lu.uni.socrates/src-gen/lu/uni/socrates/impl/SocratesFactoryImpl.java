/**
 * generated by Xtext 2.17.0.M1
 */
package lu.uni.socrates.impl;

import lu.uni.socrates.*;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class SocratesFactoryImpl extends EFactoryImpl implements SocratesFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static SocratesFactory init()
  {
    try
    {
      SocratesFactory theSocratesFactory = (SocratesFactory)EPackage.Registry.INSTANCE.getEFactory(SocratesPackage.eNS_URI);
      if (theSocratesFactory != null)
      {
        return theSocratesFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new SocratesFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SocratesFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case SocratesPackage.SOCRATES: return createSocrates();
      case SocratesPackage.ORACLE: return createOracle();
      case SocratesPackage.REQUIREMENT: return createRequirement();
      case SocratesPackage.SIGNALSDEFINITION: return createSignalsdefinition();
      case SocratesPackage.CONSTANTS_DEFINITION: return createConstantsDefinition();
      case SocratesPackage.CONSTANT_DEFINITION: return createConstantDefinition();
      case SocratesPackage.SIGNAL_ID: return createSignalID();
      case SocratesPackage.CONSTANT_ID: return createConstantId();
      case SocratesPackage.TVARIABLE: return createTvariable();
      case SocratesPackage.NEGATIONFORMULA: return createnegationformula();
      case SocratesPackage.FOR_ALLFORMULA: return createforAllformula();
      case SocratesPackage.EXISTSFORMULA: return createexistsformula();
      case SocratesPackage.FORMULA: return createformula();
      case SocratesPackage.FORMULAB: return createformulab();
      case SocratesPackage.FORMULABPRIME: return createformulabprime();
      case SocratesPackage.TERM: return createterm();
      case SocratesPackage.TERMPRIME: return createtermprime();
      case SocratesPackage.EXPRESSION: return createexpression();
      case SocratesPackage.EXPRESSIONB: return createexpressionb();
      case SocratesPackage.EXPRESSIONPRIME: return createexpressionprime();
      case SocratesPackage.EXPRESSIONTERM: return createexpressionterm();
      case SocratesPackage.EXPRESSIONTERMPRIME: return createexpressiontermprime();
      case SocratesPackage.EXPRESSION_ATOM: return createExpressionAtom();
      case SocratesPackage.BASICEXPRESSION: return createBasicexpression();
      case SocratesPackage.BASICFORMULAE: return createbasicformulae();
      case SocratesPackage.BOUNDTERM: return createboundterm();
      case SocratesPackage.TIMEDTERM: return createtimedterm();
      case SocratesPackage.ATOM: return createatom();
      case SocratesPackage.VALUE: return createvalue();
      case SocratesPackage.SIGNAL: return createSignal();
      case SocratesPackage.ABS_EXP: return createAbsEXP();
      case SocratesPackage.NORMEXP: return createNormexp();
      case SocratesPackage.SIN: return createSin();
      case SocratesPackage.COS: return createCos();
      case SocratesPackage.SQRT: return createSqrt();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Socrates createSocrates()
  {
    SocratesImpl socrates = new SocratesImpl();
    return socrates;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Oracle createOracle()
  {
    OracleImpl oracle = new OracleImpl();
    return oracle;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Requirement createRequirement()
  {
    RequirementImpl requirement = new RequirementImpl();
    return requirement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Signalsdefinition createSignalsdefinition()
  {
    SignalsdefinitionImpl signalsdefinition = new SignalsdefinitionImpl();
    return signalsdefinition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ConstantsDefinition createConstantsDefinition()
  {
    ConstantsDefinitionImpl constantsDefinition = new ConstantsDefinitionImpl();
    return constantsDefinition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ConstantDefinition createConstantDefinition()
  {
    ConstantDefinitionImpl constantDefinition = new ConstantDefinitionImpl();
    return constantDefinition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SignalID createSignalID()
  {
    SignalIDImpl signalID = new SignalIDImpl();
    return signalID;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ConstantId createConstantId()
  {
    ConstantIdImpl constantId = new ConstantIdImpl();
    return constantId;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Tvariable createTvariable()
  {
    TvariableImpl tvariable = new TvariableImpl();
    return tvariable;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public negationformula createnegationformula()
  {
    negationformulaImpl negationformula = new negationformulaImpl();
    return negationformula;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public forAllformula createforAllformula()
  {
    forAllformulaImpl forAllformula = new forAllformulaImpl();
    return forAllformula;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public existsformula createexistsformula()
  {
    existsformulaImpl existsformula = new existsformulaImpl();
    return existsformula;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public formula createformula()
  {
    formulaImpl formula = new formulaImpl();
    return formula;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public formulab createformulab()
  {
    formulabImpl formulab = new formulabImpl();
    return formulab;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public formulabprime createformulabprime()
  {
    formulabprimeImpl formulabprime = new formulabprimeImpl();
    return formulabprime;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public term createterm()
  {
    termImpl term = new termImpl();
    return term;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public termprime createtermprime()
  {
    termprimeImpl termprime = new termprimeImpl();
    return termprime;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public expression createexpression()
  {
    expressionImpl expression = new expressionImpl();
    return expression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public expressionb createexpressionb()
  {
    expressionbImpl expressionb = new expressionbImpl();
    return expressionb;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public expressionprime createexpressionprime()
  {
    expressionprimeImpl expressionprime = new expressionprimeImpl();
    return expressionprime;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public expressionterm createexpressionterm()
  {
    expressiontermImpl expressionterm = new expressiontermImpl();
    return expressionterm;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public expressiontermprime createexpressiontermprime()
  {
    expressiontermprimeImpl expressiontermprime = new expressiontermprimeImpl();
    return expressiontermprime;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ExpressionAtom createExpressionAtom()
  {
    ExpressionAtomImpl expressionAtom = new ExpressionAtomImpl();
    return expressionAtom;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Basicexpression createBasicexpression()
  {
    BasicexpressionImpl basicexpression = new BasicexpressionImpl();
    return basicexpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public basicformulae createbasicformulae()
  {
    basicformulaeImpl basicformulae = new basicformulaeImpl();
    return basicformulae;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boundterm createboundterm()
  {
    boundtermImpl boundterm = new boundtermImpl();
    return boundterm;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public timedterm createtimedterm()
  {
    timedtermImpl timedterm = new timedtermImpl();
    return timedterm;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public atom createatom()
  {
    atomImpl atom = new atomImpl();
    return atom;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public value createvalue()
  {
    valueImpl value = new valueImpl();
    return value;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Signal createSignal()
  {
    SignalImpl signal = new SignalImpl();
    return signal;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AbsEXP createAbsEXP()
  {
    AbsEXPImpl absEXP = new AbsEXPImpl();
    return absEXP;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Normexp createNormexp()
  {
    NormexpImpl normexp = new NormexpImpl();
    return normexp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Sin createSin()
  {
    SinImpl sin = new SinImpl();
    return sin;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Cos createCos()
  {
    CosImpl cos = new CosImpl();
    return cos;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Sqrt createSqrt()
  {
    SqrtImpl sqrt = new SqrtImpl();
    return sqrt;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SocratesPackage getSocratesPackage()
  {
    return (SocratesPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static SocratesPackage getPackage()
  {
    return SocratesPackage.eINSTANCE;
  }

} //SocratesFactoryImpl

/**
 * generated by Xtext 2.19.0
 */
package lu.uni.socrates.impl;

import lu.uni.socrates.Existsformula;
import lu.uni.socrates.SocratesPackage;
import lu.uni.socrates.boundterm;
import lu.uni.socrates.formula;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Existsformula</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link lu.uni.socrates.impl.ExistsformulaImpl#getBound <em>Bound</em>}</li>
 *   <li>{@link lu.uni.socrates.impl.ExistsformulaImpl#getExistschild <em>Existschild</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ExistsformulaImpl extends MinimalEObjectImpl.Container implements Existsformula
{
  /**
   * The cached value of the '{@link #getBound() <em>Bound</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBound()
   * @generated
   * @ordered
   */
  protected boundterm bound;

  /**
   * The cached value of the '{@link #getExistschild() <em>Existschild</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExistschild()
   * @generated
   * @ordered
   */
  protected formula existschild;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ExistsformulaImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return SocratesPackage.Literals.EXISTSFORMULA;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boundterm getBound()
  {
    return bound;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetBound(boundterm newBound, NotificationChain msgs)
  {
    boundterm oldBound = bound;
    bound = newBound;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, SocratesPackage.EXISTSFORMULA__BOUND, oldBound, newBound);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setBound(boundterm newBound)
  {
    if (newBound != bound)
    {
      NotificationChain msgs = null;
      if (bound != null)
        msgs = ((InternalEObject)bound).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - SocratesPackage.EXISTSFORMULA__BOUND, null, msgs);
      if (newBound != null)
        msgs = ((InternalEObject)newBound).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - SocratesPackage.EXISTSFORMULA__BOUND, null, msgs);
      msgs = basicSetBound(newBound, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SocratesPackage.EXISTSFORMULA__BOUND, newBound, newBound));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public formula getExistschild()
  {
    return existschild;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetExistschild(formula newExistschild, NotificationChain msgs)
  {
    formula oldExistschild = existschild;
    existschild = newExistschild;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, SocratesPackage.EXISTSFORMULA__EXISTSCHILD, oldExistschild, newExistschild);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setExistschild(formula newExistschild)
  {
    if (newExistschild != existschild)
    {
      NotificationChain msgs = null;
      if (existschild != null)
        msgs = ((InternalEObject)existschild).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - SocratesPackage.EXISTSFORMULA__EXISTSCHILD, null, msgs);
      if (newExistschild != null)
        msgs = ((InternalEObject)newExistschild).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - SocratesPackage.EXISTSFORMULA__EXISTSCHILD, null, msgs);
      msgs = basicSetExistschild(newExistschild, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SocratesPackage.EXISTSFORMULA__EXISTSCHILD, newExistschild, newExistschild));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case SocratesPackage.EXISTSFORMULA__BOUND:
        return basicSetBound(null, msgs);
      case SocratesPackage.EXISTSFORMULA__EXISTSCHILD:
        return basicSetExistschild(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case SocratesPackage.EXISTSFORMULA__BOUND:
        return getBound();
      case SocratesPackage.EXISTSFORMULA__EXISTSCHILD:
        return getExistschild();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case SocratesPackage.EXISTSFORMULA__BOUND:
        setBound((boundterm)newValue);
        return;
      case SocratesPackage.EXISTSFORMULA__EXISTSCHILD:
        setExistschild((formula)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case SocratesPackage.EXISTSFORMULA__BOUND:
        setBound((boundterm)null);
        return;
      case SocratesPackage.EXISTSFORMULA__EXISTSCHILD:
        setExistschild((formula)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case SocratesPackage.EXISTSFORMULA__BOUND:
        return bound != null;
      case SocratesPackage.EXISTSFORMULA__EXISTSCHILD:
        return existschild != null;
    }
    return super.eIsSet(featureID);
  }

} //ExistsformulaImpl

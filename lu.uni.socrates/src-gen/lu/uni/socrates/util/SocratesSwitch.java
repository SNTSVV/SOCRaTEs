/**
 * generated by Xtext 2.19.0
 */
package lu.uni.socrates.util;

import lu.uni.socrates.*;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.util.Switch;

/**
 * <!-- begin-user-doc -->
 * The <b>Switch</b> for the model's inheritance hierarchy.
 * It supports the call {@link #doSwitch(EObject) doSwitch(object)}
 * to invoke the <code>caseXXX</code> method for each class of the model,
 * starting with the actual class of the object
 * and proceeding up the inheritance hierarchy
 * until a non-null result is returned,
 * which is the result of the switch.
 * <!-- end-user-doc -->
 * @see lu.uni.socrates.SocratesPackage
 * @generated
 */
public class SocratesSwitch<T> extends Switch<T>
{
  /**
   * The cached model package
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static SocratesPackage modelPackage;

  /**
   * Creates an instance of the switch.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SocratesSwitch()
  {
    if (modelPackage == null)
    {
      modelPackage = SocratesPackage.eINSTANCE;
    }
  }

  /**
   * Checks whether this is a switch for the given package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param ePackage the package in question.
   * @return whether this is a switch for the given package.
   * @generated
   */
  @Override
  protected boolean isSwitchFor(EPackage ePackage)
  {
    return ePackage == modelPackage;
  }

  /**
   * Calls <code>caseXXX</code> for each class of the model until one returns a non null result; it yields that result.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the first non-null result returned by a <code>caseXXX</code> call.
   * @generated
   */
  @Override
  protected T doSwitch(int classifierID, EObject theEObject)
  {
    switch (classifierID)
    {
      case SocratesPackage.SOCRATES:
      {
        Socrates socrates = (Socrates)theEObject;
        T result = caseSocrates(socrates);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SocratesPackage.ORACLE:
      {
        Oracle oracle = (Oracle)theEObject;
        T result = caseOracle(oracle);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SocratesPackage.REQUIREMENT:
      {
        Requirement requirement = (Requirement)theEObject;
        T result = caseRequirement(requirement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SocratesPackage.SIGNALSDEFINITION:
      {
        Signalsdefinition signalsdefinition = (Signalsdefinition)theEObject;
        T result = caseSignalsdefinition(signalsdefinition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SocratesPackage.CONSTANTS_DEFINITION:
      {
        ConstantsDefinition constantsDefinition = (ConstantsDefinition)theEObject;
        T result = caseConstantsDefinition(constantsDefinition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SocratesPackage.CONSTANT_DEFINITION:
      {
        ConstantDefinition constantDefinition = (ConstantDefinition)theEObject;
        T result = caseConstantDefinition(constantDefinition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SocratesPackage.SIGNAL_ID:
      {
        SignalID signalID = (SignalID)theEObject;
        T result = caseSignalID(signalID);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SocratesPackage.CONSTANT_ID:
      {
        ConstantId constantId = (ConstantId)theEObject;
        T result = caseConstantId(constantId);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SocratesPackage.FOR_ALLFORMULA:
      {
        ForAllformula forAllformula = (ForAllformula)theEObject;
        T result = caseForAllformula(forAllformula);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SocratesPackage.EXISTSFORMULA:
      {
        Existsformula existsformula = (Existsformula)theEObject;
        T result = caseExistsformula(existsformula);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SocratesPackage.TVARIABLE:
      {
        Tvariable tvariable = (Tvariable)theEObject;
        T result = caseTvariable(tvariable);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SocratesPackage.NEGATIONFORMULA:
      {
        negationformula negationformula = (negationformula)theEObject;
        T result = casenegationformula(negationformula);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SocratesPackage.FORMULA:
      {
        formula formula = (formula)theEObject;
        T result = caseformula(formula);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SocratesPackage.FORMULAB:
      {
        formulab formulab = (formulab)theEObject;
        T result = caseformulab(formulab);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SocratesPackage.FORMULABPRIME:
      {
        formulabprime formulabprime = (formulabprime)theEObject;
        T result = caseformulabprime(formulabprime);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SocratesPackage.TERM:
      {
        term term = (term)theEObject;
        T result = caseterm(term);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SocratesPackage.TERMPRIME:
      {
        termprime termprime = (termprime)theEObject;
        T result = casetermprime(termprime);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SocratesPackage.EXPRESSION:
      {
        expression expression = (expression)theEObject;
        T result = caseexpression(expression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SocratesPackage.EXPRESSIONB:
      {
        expressionb expressionb = (expressionb)theEObject;
        T result = caseexpressionb(expressionb);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SocratesPackage.EXPRESSIONPRIME:
      {
        expressionprime expressionprime = (expressionprime)theEObject;
        T result = caseexpressionprime(expressionprime);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SocratesPackage.EXPRESSIONTERM:
      {
        expressionterm expressionterm = (expressionterm)theEObject;
        T result = caseexpressionterm(expressionterm);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SocratesPackage.EXPRESSIONTERMPRIME:
      {
        expressiontermprime expressiontermprime = (expressiontermprime)theEObject;
        T result = caseexpressiontermprime(expressiontermprime);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SocratesPackage.EXPRESSION_ATOM:
      {
        ExpressionAtom expressionAtom = (ExpressionAtom)theEObject;
        T result = caseExpressionAtom(expressionAtom);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SocratesPackage.BASICEXPRESSION:
      {
        Basicexpression basicexpression = (Basicexpression)theEObject;
        T result = caseBasicexpression(basicexpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SocratesPackage.BASICFORMULAE:
      {
        basicformulae basicformulae = (basicformulae)theEObject;
        T result = casebasicformulae(basicformulae);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SocratesPackage.BOUNDTERM:
      {
        boundterm boundterm = (boundterm)theEObject;
        T result = caseboundterm(boundterm);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SocratesPackage.TIMEDTERM:
      {
        timedterm timedterm = (timedterm)theEObject;
        T result = casetimedterm(timedterm);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SocratesPackage.ATOM:
      {
        atom atom = (atom)theEObject;
        T result = caseatom(atom);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SocratesPackage.VALUE:
      {
        value value = (value)theEObject;
        T result = casevalue(value);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SocratesPackage.SIGNAL:
      {
        Signal signal = (Signal)theEObject;
        T result = caseSignal(signal);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SocratesPackage.ABS_EXP:
      {
        AbsEXP absEXP = (AbsEXP)theEObject;
        T result = caseAbsEXP(absEXP);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SocratesPackage.NORMEXP:
      {
        Normexp normexp = (Normexp)theEObject;
        T result = caseNormexp(normexp);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SocratesPackage.SIN:
      {
        Sin sin = (Sin)theEObject;
        T result = caseSin(sin);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SocratesPackage.COS:
      {
        Cos cos = (Cos)theEObject;
        T result = caseCos(cos);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SocratesPackage.SQRT:
      {
        Sqrt sqrt = (Sqrt)theEObject;
        T result = caseSqrt(sqrt);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      default: return defaultCase(theEObject);
    }
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Socrates</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Socrates</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSocrates(Socrates object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Oracle</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Oracle</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOracle(Oracle object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Requirement</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Requirement</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRequirement(Requirement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Signalsdefinition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Signalsdefinition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSignalsdefinition(Signalsdefinition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Constants Definition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Constants Definition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseConstantsDefinition(ConstantsDefinition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Constant Definition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Constant Definition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseConstantDefinition(ConstantDefinition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Signal ID</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Signal ID</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSignalID(SignalID object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Constant Id</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Constant Id</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseConstantId(ConstantId object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>For Allformula</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>For Allformula</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseForAllformula(ForAllformula object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Existsformula</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Existsformula</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExistsformula(Existsformula object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Tvariable</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Tvariable</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTvariable(Tvariable object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>negationformula</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>negationformula</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casenegationformula(negationformula object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>formula</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>formula</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseformula(formula object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>formulab</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>formulab</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseformulab(formulab object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>formulabprime</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>formulabprime</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseformulabprime(formulabprime object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>term</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>term</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseterm(term object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>termprime</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>termprime</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casetermprime(termprime object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseexpression(expression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>expressionb</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>expressionb</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseexpressionb(expressionb object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>expressionprime</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>expressionprime</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseexpressionprime(expressionprime object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>expressionterm</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>expressionterm</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseexpressionterm(expressionterm object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>expressiontermprime</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>expressiontermprime</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseexpressiontermprime(expressiontermprime object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Expression Atom</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Expression Atom</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExpressionAtom(ExpressionAtom object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Basicexpression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Basicexpression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBasicexpression(Basicexpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>basicformulae</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>basicformulae</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casebasicformulae(basicformulae object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>boundterm</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>boundterm</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseboundterm(boundterm object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>timedterm</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>timedterm</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casetimedterm(timedterm object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>atom</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>atom</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseatom(atom object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>value</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>value</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casevalue(value object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Signal</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Signal</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSignal(Signal object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Abs EXP</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Abs EXP</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAbsEXP(AbsEXP object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Normexp</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Normexp</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNormexp(Normexp object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Sin</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Sin</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSin(Sin object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Cos</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Cos</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCos(Cos object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Sqrt</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Sqrt</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSqrt(Sqrt object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EObject</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch, but this is the last case anyway.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EObject</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject)
   * @generated
   */
  @Override
  public T defaultCase(EObject object)
  {
    return null;
  }

} //SocratesSwitch

/*
 * generated by Xtext 2.17.0.M1
 */
grammar InternalSocrates;

options {
	superClass=AbstractInternalAntlrParser;
	backtrack=true;
}

@lexer::header {
package lu.uni.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package lu.uni.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import lu.uni.services.SocratesGrammarAccess;

}

@parser::members {

/*
  This grammar contains a lot of empty actions to work around a bug in ANTLR.
  Otherwise the ANTLR tool will create synpreds that cannot be compiled in some rare cases.
*/

 	private SocratesGrammarAccess grammarAccess;

    public InternalSocratesParser(TokenStream input, SocratesGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Socrates";
   	}

   	@Override
   	protected SocratesGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleSocrates
entryRuleSocrates returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSocratesRule()); }
	iv_ruleSocrates=ruleSocrates
	{ $current=$iv_ruleSocrates.current; }
	EOF;

// Rule Socrates
ruleSocrates returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getSocratesAccess().getOraclesOracleParserRuleCall_0());
			}
			lv_oracles_0_0=ruleOracle
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getSocratesRule());
				}
				add(
					$current,
					"oracles",
					lv_oracles_0_0,
					"lu.uni.Socrates.Oracle");
				afterParserOrEnumRuleCall();
			}
		)
	)*
;

// Entry rule entryRuleOracle
entryRuleOracle returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOracleRule()); }
	iv_ruleOracle=ruleOracle
	{ $current=$iv_ruleOracle.current; }
	EOF;

// Rule Oracle
ruleOracle returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Oracle'
		{
			newLeafNode(otherlv_0, grammarAccess.getOracleAccess().getOracleKeyword_0());
		}
		otherlv_1='ModelName:'
		{
			newLeafNode(otherlv_1, grammarAccess.getOracleAccess().getModelNameKeyword_1());
		}
		(
			(
				lv_modelName_2_0=RULE_ID
				{
					newLeafNode(lv_modelName_2_0, grammarAccess.getOracleAccess().getModelNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getOracleRule());
					}
					setWithLastConsumed(
						$current,
						"modelName",
						lv_modelName_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_3=';'
		{
			newLeafNode(otherlv_3, grammarAccess.getOracleAccess().getSemicolonKeyword_3());
		}
		(
			otherlv_4='Path:'
			{
				newLeafNode(otherlv_4, grammarAccess.getOracleAccess().getPathKeyword_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getOracleAccess().getPathPATHParserRuleCall_4_1_0());
					}
					lv_path_5_0=rulePATH
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getOracleRule());
						}
						set(
							$current,
							"path",
							lv_path_5_0,
							"lu.uni.Socrates.PATH");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_6=';'
			{
				newLeafNode(otherlv_6, grammarAccess.getOracleAccess().getSemicolonKeyword_4_2());
			}
		)?
		otherlv_7='ID:'
		{
			newLeafNode(otherlv_7, grammarAccess.getOracleAccess().getIDKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getOracleAccess().getReqnameReqIdParserRuleCall_6_0());
				}
				lv_reqname_8_0=ruleReqId
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getOracleRule());
					}
					set(
						$current,
						"reqname",
						lv_reqname_8_0,
						"lu.uni.Socrates.ReqId");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_9=';'
		{
			newLeafNode(otherlv_9, grammarAccess.getOracleAccess().getSemicolonKeyword_7());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getOracleAccess().getSigndefSignalsdefinitionParserRuleCall_8_0());
				}
				lv_signdef_10_0=ruleSignalsdefinition
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getOracleRule());
					}
					set(
						$current,
						"signdef",
						lv_signdef_10_0,
						"lu.uni.Socrates.Signalsdefinition");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getOracleAccess().getConstantDefinitionsConstantsDefinitionParserRuleCall_9_0());
				}
				lv_constantDefinitions_11_0=ruleConstantsDefinition
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getOracleRule());
					}
					set(
						$current,
						"constantDefinitions",
						lv_constantDefinitions_11_0,
						"lu.uni.Socrates.ConstantsDefinition");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getOracleAccess().getRequirementRequirementParserRuleCall_10_0());
				}
				lv_requirement_12_0=ruleRequirement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getOracleRule());
					}
					set(
						$current,
						"requirement",
						lv_requirement_12_0,
						"lu.uni.Socrates.Requirement");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleRequirement
entryRuleRequirement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRequirementRule()); }
	iv_ruleRequirement=ruleRequirement
	{ $current=$iv_ruleRequirement.current; }
	EOF;

// Rule Requirement
ruleRequirement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Description:'
		{
			newLeafNode(otherlv_0, grammarAccess.getRequirementAccess().getDescriptionKeyword_0());
		}
		this_DESCRIPTION_1=RULE_DESCRIPTION
		{
			newLeafNode(this_DESCRIPTION_1, grammarAccess.getRequirementAccess().getDESCRIPTIONTerminalRuleCall_1());
		}
		otherlv_2=';'
		{
			newLeafNode(otherlv_2, grammarAccess.getRequirementAccess().getSemicolonKeyword_2());
		}
		otherlv_3='Specification:'
		{
			newLeafNode(otherlv_3, grammarAccess.getRequirementAccess().getSpecificationKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRequirementAccess().getFormulaFormulaParserRuleCall_4_0());
				}
				lv_formula_4_0=ruleformula
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRequirementRule());
					}
					set(
						$current,
						"formula",
						lv_formula_4_0,
						"lu.uni.Socrates.formula");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5=';'
		{
			newLeafNode(otherlv_5, grammarAccess.getRequirementAccess().getSemicolonKeyword_5());
		}
	)
;

// Entry rule entryRuleReqId
entryRuleReqId returns [String current=null]:
	{ newCompositeNode(grammarAccess.getReqIdRule()); }
	iv_ruleReqId=ruleReqId
	{ $current=$iv_ruleReqId.current.getText(); }
	EOF;

// Rule ReqId
ruleReqId returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_ID_0=RULE_ID
		{
			$current.merge(this_ID_0);
		}
		{
			newLeafNode(this_ID_0, grammarAccess.getReqIdAccess().getIDTerminalRuleCall_0());
		}
		(
			kw='_'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getReqIdAccess().get_Keyword_1_0());
			}
			{
				newCompositeNode(grammarAccess.getReqIdAccess().getNumberParserRuleCall_1_1());
			}
			this_number_2=rulenumber
			{
				$current.merge(this_number_2);
			}
			{
				afterParserOrEnumRuleCall();
			}
			(
				kw='_'
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getReqIdAccess().get_Keyword_1_2_0());
				}
				{
					newCompositeNode(grammarAccess.getReqIdAccess().getNumberParserRuleCall_1_2_1());
				}
				this_number_4=rulenumber
				{
					$current.merge(this_number_4);
				}
				{
					afterParserOrEnumRuleCall();
				}
			)*
		)?
	)
;

// Entry rule entryRuleSignalsdefinition
entryRuleSignalsdefinition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSignalsdefinitionRule()); }
	iv_ruleSignalsdefinition=ruleSignalsdefinition
	{ $current=$iv_ruleSignalsdefinition.current; }
	EOF;

// Rule Signalsdefinition
ruleSignalsdefinition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Signals'
		{
			newLeafNode(otherlv_0, grammarAccess.getSignalsdefinitionAccess().getSignalsKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSignalsdefinitionAccess().getSignalsSignalIDParserRuleCall_1_0());
				}
				lv_signals_1_0=ruleSignalID
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSignalsdefinitionRule());
					}
					add(
						$current,
						"signals",
						lv_signals_1_0,
						"lu.uni.Socrates.SignalID");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_2=','
			{
				newLeafNode(otherlv_2, grammarAccess.getSignalsdefinitionAccess().getCommaKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getSignalsdefinitionAccess().getSignalsSignalIDParserRuleCall_2_1_0());
					}
					lv_signals_3_0=ruleSignalID
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSignalsdefinitionRule());
						}
						add(
							$current,
							"signals",
							lv_signals_3_0,
							"lu.uni.Socrates.SignalID");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_4=';'
		{
			newLeafNode(otherlv_4, grammarAccess.getSignalsdefinitionAccess().getSemicolonKeyword_3());
		}
	)
;

// Entry rule entryRuleConstantsDefinition
entryRuleConstantsDefinition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConstantsDefinitionRule()); }
	iv_ruleConstantsDefinition=ruleConstantsDefinition
	{ $current=$iv_ruleConstantsDefinition.current; }
	EOF;

// Rule ConstantsDefinition
ruleConstantsDefinition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Constants'
		{
			newLeafNode(otherlv_0, grammarAccess.getConstantsDefinitionAccess().getConstantsKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getConstantsDefinitionAccess().getConstantsConstantDefinitionParserRuleCall_1_0());
				}
				lv_constants_1_0=ruleConstantDefinition
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConstantsDefinitionRule());
					}
					add(
						$current,
						"constants",
						lv_constants_1_0,
						"lu.uni.Socrates.ConstantDefinition");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_2=','
			{
				newLeafNode(otherlv_2, grammarAccess.getConstantsDefinitionAccess().getCommaKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getConstantsDefinitionAccess().getConstantsConstantDefinitionParserRuleCall_2_1_0());
					}
					lv_constants_3_0=ruleConstantDefinition
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getConstantsDefinitionRule());
						}
						add(
							$current,
							"constants",
							lv_constants_3_0,
							"lu.uni.Socrates.ConstantDefinition");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_4=';'
		{
			newLeafNode(otherlv_4, grammarAccess.getConstantsDefinitionAccess().getSemicolonKeyword_3());
		}
	)
;

// Entry rule entryRuleConstantDefinition
entryRuleConstantDefinition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConstantDefinitionRule()); }
	iv_ruleConstantDefinition=ruleConstantDefinition
	{ $current=$iv_ruleConstantDefinition.current; }
	EOF;

// Rule ConstantDefinition
ruleConstantDefinition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getConstantDefinitionAccess().getConstantidConstantIdParserRuleCall_0_0());
				}
				lv_constantid_0_0=ruleConstantId
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConstantDefinitionRule());
					}
					set(
						$current,
						"constantid",
						lv_constantid_0_0,
						"lu.uni.Socrates.ConstantId");
					afterParserOrEnumRuleCall();
				}
			)
		)
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getConstantDefinitionAccess().getEQParserRuleCall_1());
		}
		ruleEQ
		{
			afterParserOrEnumRuleCall();
		}
		(
			{
				/* */
			}
			{
				newCompositeNode(grammarAccess.getConstantDefinitionAccess().getSIGNParserRuleCall_2());
			}
			ruleSIGN
			{
				afterParserOrEnumRuleCall();
			}
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getConstantDefinitionAccess().getValueNumberParserRuleCall_3_0());
				}
				lv_value_3_0=rulenumber
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConstantDefinitionRule());
					}
					set(
						$current,
						"value",
						lv_value_3_0,
						"lu.uni.Socrates.number");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleSignalID
entryRuleSignalID returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSignalIDRule()); }
	iv_ruleSignalID=ruleSignalID
	{ $current=$iv_ruleSignalID.current; }
	EOF;

// Rule SignalID
ruleSignalID returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_name_0_0=RULE_ID
			{
				newLeafNode(lv_name_0_0, grammarAccess.getSignalIDAccess().getNameIDTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getSignalIDRule());
				}
				setWithLastConsumed(
					$current,
					"name",
					lv_name_0_0,
					"org.eclipse.xtext.common.Terminals.ID");
			}
		)
	)
;

// Entry rule entryRuleConstantId
entryRuleConstantId returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConstantIdRule()); }
	iv_ruleConstantId=ruleConstantId
	{ $current=$iv_ruleConstantId.current; }
	EOF;

// Rule ConstantId
ruleConstantId returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_name_0_0=RULE_ID
			{
				newLeafNode(lv_name_0_0, grammarAccess.getConstantIdAccess().getNameIDTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getConstantIdRule());
				}
				setWithLastConsumed(
					$current,
					"name",
					lv_name_0_0,
					"org.eclipse.xtext.common.Terminals.ID");
			}
		)
	)
;

// Entry rule entryRuleTvariable
entryRuleTvariable returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTvariableRule()); }
	iv_ruleTvariable=ruleTvariable
	{ $current=$iv_ruleTvariable.current; }
	EOF;

// Rule Tvariable
ruleTvariable returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_name_0_0=RULE_ID
			{
				newLeafNode(lv_name_0_0, grammarAccess.getTvariableAccess().getNameIDTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getTvariableRule());
				}
				setWithLastConsumed(
					$current,
					"name",
					lv_name_0_0,
					"org.eclipse.xtext.common.Terminals.ID");
			}
		)
	)
;

// Entry rule entryRulenegationformula
entryRulenegationformula returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNegationformulaRule()); }
	iv_rulenegationformula=rulenegationformula
	{ $current=$iv_rulenegationformula.current; }
	EOF;

// Rule negationformula
rulenegationformula returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getNegationformulaAccess().getNOTParserRuleCall_0());
		}
		ruleNOT
		{
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getNegationformulaAccess().getNegationchildFormulaParserRuleCall_1_0());
				}
				lv_negationchild_1_0=ruleformula
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getNegationformulaRule());
					}
					set(
						$current,
						"negationchild",
						lv_negationchild_1_0,
						"lu.uni.Socrates.formula");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleforAllformula
entryRuleforAllformula returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getForAllformulaRule()); }
	iv_ruleforAllformula=ruleforAllformula
	{ $current=$iv_ruleforAllformula.current; }
	EOF;

// Rule forAllformula
ruleforAllformula returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getForAllformulaAccess().getFORALLParserRuleCall_0());
		}
		ruleFORALL
		{
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getForAllformulaAccess().getBoundBoundtermParserRuleCall_1_0());
				}
				lv_bound_1_0=ruleboundterm
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getForAllformulaRule());
					}
					set(
						$current,
						"bound",
						lv_bound_1_0,
						"lu.uni.Socrates.boundterm");
					afterParserOrEnumRuleCall();
				}
			)
		)
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getForAllformulaAccess().getCOLONParserRuleCall_2());
		}
		ruleCOLON
		{
			afterParserOrEnumRuleCall();
		}
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getForAllformulaAccess().getLPARENParserRuleCall_3());
		}
		ruleLPAREN
		{
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getForAllformulaAccess().getForallchildFormulaParserRuleCall_4_0());
				}
				lv_forallchild_4_0=ruleformula
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getForAllformulaRule());
					}
					set(
						$current,
						"forallchild",
						lv_forallchild_4_0,
						"lu.uni.Socrates.formula");
					afterParserOrEnumRuleCall();
				}
			)
		)
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getForAllformulaAccess().getRPARENParserRuleCall_5());
		}
		ruleRPAREN
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleexistsformula
entryRuleexistsformula returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExistsformulaRule()); }
	iv_ruleexistsformula=ruleexistsformula
	{ $current=$iv_ruleexistsformula.current; }
	EOF;

// Rule existsformula
ruleexistsformula returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getExistsformulaAccess().getEXISTSParserRuleCall_0());
		}
		ruleEXISTS
		{
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getExistsformulaAccess().getBoundBoundtermParserRuleCall_1_0());
				}
				lv_bound_1_0=ruleboundterm
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExistsformulaRule());
					}
					set(
						$current,
						"bound",
						lv_bound_1_0,
						"lu.uni.Socrates.boundterm");
					afterParserOrEnumRuleCall();
				}
			)
		)
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getExistsformulaAccess().getCOLONParserRuleCall_2());
		}
		ruleCOLON
		{
			afterParserOrEnumRuleCall();
		}
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getExistsformulaAccess().getLPARENParserRuleCall_3());
		}
		ruleLPAREN
		{
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getExistsformulaAccess().getExistschildFormulaParserRuleCall_4_0());
				}
				lv_existschild_4_0=ruleformula
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExistsformulaRule());
					}
					set(
						$current,
						"existschild",
						lv_existschild_4_0,
						"lu.uni.Socrates.formula");
					afterParserOrEnumRuleCall();
				}
			)
		)
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getExistsformulaAccess().getRPARENParserRuleCall_5());
		}
		ruleRPAREN
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleformula
entryRuleformula returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFormulaRule()); }
	iv_ruleformula=ruleformula
	{ $current=$iv_ruleformula.current; }
	EOF;

// Rule formula
ruleformula returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getFormulaAccess().getFBasicformulaeParserRuleCall_0_0());
				}
				lv_f_0_0=rulebasicformulae
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFormulaRule());
					}
					set(
						$current,
						"f",
						lv_f_0_0,
						"lu.uni.Socrates.basicformulae");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getFormulaAccess().getFFormulabParserRuleCall_1_0());
				}
				lv_f_1_0=ruleformulab
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFormulaRule());
					}
					set(
						$current,
						"f",
						lv_f_1_0,
						"lu.uni.Socrates.formulab");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleformulab
entryRuleformulab returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFormulabRule()); }
	iv_ruleformulab=ruleformulab
	{ $current=$iv_ruleformulab.current; }
	EOF;

// Rule formulab
ruleformulab returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getFormulabAccess().getATermParserRuleCall_0_0());
				}
				lv_a_0_0=ruleterm
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFormulabRule());
					}
					set(
						$current,
						"a",
						lv_a_0_0,
						"lu.uni.Socrates.term");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getFormulabAccess().getTFormulabprimeParserRuleCall_1_0());
				}
				lv_t_1_0=ruleformulabprime
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFormulabRule());
					}
					set(
						$current,
						"t",
						lv_t_1_0,
						"lu.uni.Socrates.formulabprime");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleformulabprime
entryRuleformulabprime returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFormulabprimeRule()); }
	iv_ruleformulabprime=ruleformulabprime
	{ $current=$iv_ruleformulabprime.current; }
	EOF;

// Rule formulabprime
ruleformulabprime returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					lv_op_0_1='or'
					{
						newLeafNode(lv_op_0_1, grammarAccess.getFormulabprimeAccess().getOpOrKeyword_0_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getFormulabprimeRule());
						}
						setWithLastConsumed($current, "op", lv_op_0_1, null);
					}
					    |
					lv_op_0_2='implies'
					{
						newLeafNode(lv_op_0_2, grammarAccess.getFormulabprimeAccess().getOpImpliesKeyword_0_0_1());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getFormulabprimeRule());
						}
						setWithLastConsumed($current, "op", lv_op_0_2, null);
					}
					    |
					lv_op_0_3='iff'
					{
						newLeafNode(lv_op_0_3, grammarAccess.getFormulabprimeAccess().getOpIffKeyword_0_0_2());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getFormulabprimeRule());
						}
						setWithLastConsumed($current, "op", lv_op_0_3, null);
					}
				)
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getFormulabprimeAccess().getT2TermParserRuleCall_1_0());
				}
				lv_t2_1_0=ruleterm
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFormulabprimeRule());
					}
					set(
						$current,
						"t2",
						lv_t2_1_0,
						"lu.uni.Socrates.term");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getFormulabprimeAccess().getFFormulabprimeParserRuleCall_2_0());
				}
				lv_f_2_0=ruleformulabprime
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFormulabprimeRule());
					}
					set(
						$current,
						"f",
						lv_f_2_0,
						"lu.uni.Socrates.formulabprime");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)?
;

// Entry rule entryRuleterm
entryRuleterm returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTermRule()); }
	iv_ruleterm=ruleterm
	{ $current=$iv_ruleterm.current; }
	EOF;

// Rule term
ruleterm returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getTermAccess().getAAtomParserRuleCall_0_0());
				}
				lv_a_0_0=ruleatom
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTermRule());
					}
					set(
						$current,
						"a",
						lv_a_0_0,
						"lu.uni.Socrates.atom");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getTermAccess().getTTermprimeParserRuleCall_1_0());
				}
				lv_t_1_0=ruletermprime
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTermRule());
					}
					set(
						$current,
						"t",
						lv_t_1_0,
						"lu.uni.Socrates.termprime");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuletermprime
entryRuletermprime returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTermprimeRule()); }
	iv_ruletermprime=ruletermprime
	{ $current=$iv_ruletermprime.current; }
	EOF;

// Rule termprime
ruletermprime returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_op_0_0='and'
				{
					newLeafNode(lv_op_0_0, grammarAccess.getTermprimeAccess().getOpAndKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTermprimeRule());
					}
					setWithLastConsumed($current, "op", lv_op_0_0, "and");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getTermprimeAccess().getTTermParserRuleCall_1_0());
				}
				lv_t_1_0=ruleterm
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTermprimeRule());
					}
					set(
						$current,
						"t",
						lv_t_1_0,
						"lu.uni.Socrates.term");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getTermprimeAccess().getF1TermprimeParserRuleCall_2_0());
				}
				lv_f1_2_0=ruletermprime
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTermprimeRule());
					}
					set(
						$current,
						"f1",
						lv_f1_2_0,
						"lu.uni.Socrates.termprime");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)?
;

// Entry rule entryRuleexpression
entryRuleexpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	iv_ruleexpression=ruleexpression
	{ $current=$iv_ruleexpression.current; }
	EOF;

// Rule expression
ruleexpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getExpressionAccess().getExpbExpressionbParserRuleCall_0());
			}
			lv_expb_0_0=ruleexpressionb
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getExpressionRule());
				}
				set(
					$current,
					"expb",
					lv_expb_0_0,
					"lu.uni.Socrates.expressionb");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleexpressionb
entryRuleexpressionb returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionbRule()); }
	iv_ruleexpressionb=ruleexpressionb
	{ $current=$iv_ruleexpressionb.current; }
	EOF;

// Rule expressionb
ruleexpressionb returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getExpressionbAccess().getTermExpressiontermParserRuleCall_0_0_0());
					}
					lv_term_0_0=ruleexpressionterm
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getExpressionbRule());
						}
						set(
							$current,
							"term",
							lv_term_0_0,
							"lu.uni.Socrates.expressionterm");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getExpressionbAccess().getExpprimeExpressionprimeParserRuleCall_0_1_0());
					}
					lv_expprime_1_0=ruleexpressionprime
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getExpressionbRule());
						}
						set(
							$current,
							"expprime",
							lv_expprime_1_0,
							"lu.uni.Socrates.expressionprime");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			{
				/* */
			}
			{
				newCompositeNode(grammarAccess.getExpressionbAccess().getLPARENParserRuleCall_1_0());
			}
			ruleLPAREN
			{
				afterParserOrEnumRuleCall();
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getExpressionbAccess().getTermExpressiontermParserRuleCall_1_1_0());
					}
					lv_term_3_0=ruleexpressionterm
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getExpressionbRule());
						}
						set(
							$current,
							"term",
							lv_term_3_0,
							"lu.uni.Socrates.expressionterm");
						afterParserOrEnumRuleCall();
					}
				)
			)
			{
				/* */
			}
			{
				newCompositeNode(grammarAccess.getExpressionbAccess().getRPARENParserRuleCall_1_2());
			}
			ruleRPAREN
			{
				afterParserOrEnumRuleCall();
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getExpressionbAccess().getExpprimeExpressionprimeParserRuleCall_1_3_0());
					}
					lv_expprime_5_0=ruleexpressionprime
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getExpressionbRule());
						}
						set(
							$current,
							"expprime",
							lv_expprime_5_0,
							"lu.uni.Socrates.expressionprime");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRuleexpressionprime
entryRuleexpressionprime returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionprimeRule()); }
	iv_ruleexpressionprime=ruleexpressionprime
	{ $current=$iv_ruleexpressionprime.current; }
	EOF;

// Rule expressionprime
ruleexpressionprime returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					lv_op_0_1='+'
					{
						newLeafNode(lv_op_0_1, grammarAccess.getExpressionprimeAccess().getOpPlusSignKeyword_0_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getExpressionprimeRule());
						}
						setWithLastConsumed($current, "op", lv_op_0_1, null);
					}
					    |
					lv_op_0_2='-'
					{
						newLeafNode(lv_op_0_2, grammarAccess.getExpressionprimeAccess().getOpHyphenMinusKeyword_0_0_1());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getExpressionprimeRule());
						}
						setWithLastConsumed($current, "op", lv_op_0_2, null);
					}
				)
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getExpressionprimeAccess().getT2ExpressiontermParserRuleCall_1_0());
				}
				lv_t2_1_0=ruleexpressionterm
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExpressionprimeRule());
					}
					set(
						$current,
						"t2",
						lv_t2_1_0,
						"lu.uni.Socrates.expressionterm");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getExpressionprimeAccess().getFExpressionprimeParserRuleCall_2_0());
				}
				lv_f_2_0=ruleexpressionprime
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExpressionprimeRule());
					}
					set(
						$current,
						"f",
						lv_f_2_0,
						"lu.uni.Socrates.expressionprime");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)?
;

// Entry rule entryRuleexpressionterm
entryRuleexpressionterm returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressiontermRule()); }
	iv_ruleexpressionterm=ruleexpressionterm
	{ $current=$iv_ruleexpressionterm.current; }
	EOF;

// Rule expressionterm
ruleexpressionterm returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getExpressiontermAccess().getTermExpressionAtomParserRuleCall_0_0_0());
					}
					lv_term_0_1=ruleExpressionAtom
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getExpressiontermRule());
						}
						set(
							$current,
							"term",
							lv_term_0_1,
							"lu.uni.Socrates.ExpressionAtom");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getExpressiontermAccess().getTermBasicexpressionParserRuleCall_0_0_1());
					}
					lv_term_0_2=ruleBasicexpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getExpressiontermRule());
						}
						set(
							$current,
							"term",
							lv_term_0_2,
							"lu.uni.Socrates.Basicexpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getExpressiontermAccess().getExpprimeExpressiontermprimeParserRuleCall_1_0());
				}
				lv_expprime_1_0=ruleexpressiontermprime
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExpressiontermRule());
					}
					set(
						$current,
						"expprime",
						lv_expprime_1_0,
						"lu.uni.Socrates.expressiontermprime");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleexpressiontermprime
entryRuleexpressiontermprime returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressiontermprimeRule()); }
	iv_ruleexpressiontermprime=ruleexpressiontermprime
	{ $current=$iv_ruleexpressiontermprime.current; }
	EOF;

// Rule expressiontermprime
ruleexpressiontermprime returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					lv_op_0_1='*'
					{
						newLeafNode(lv_op_0_1, grammarAccess.getExpressiontermprimeAccess().getOpAsteriskKeyword_0_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getExpressiontermprimeRule());
						}
						setWithLastConsumed($current, "op", lv_op_0_1, null);
					}
					    |
					lv_op_0_2='/'
					{
						newLeafNode(lv_op_0_2, grammarAccess.getExpressiontermprimeAccess().getOpSolidusKeyword_0_0_1());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getExpressiontermprimeRule());
						}
						setWithLastConsumed($current, "op", lv_op_0_2, null);
					}
				)
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getExpressiontermprimeAccess().getT2ExpressiontermParserRuleCall_1_0());
				}
				lv_t2_1_0=ruleexpressionterm
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExpressiontermprimeRule());
					}
					set(
						$current,
						"t2",
						lv_t2_1_0,
						"lu.uni.Socrates.expressionterm");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getExpressiontermprimeAccess().getFExpressiontermprimeParserRuleCall_2_0());
				}
				lv_f_2_0=ruleexpressiontermprime
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExpressiontermprimeRule());
					}
					set(
						$current,
						"f",
						lv_f_2_0,
						"lu.uni.Socrates.expressiontermprime");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)?
;

// Entry rule entryRuleExpressionAtom
entryRuleExpressionAtom returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionAtomRule()); }
	iv_ruleExpressionAtom=ruleExpressionAtom
	{ $current=$iv_ruleExpressionAtom.current; }
	EOF;

// Rule ExpressionAtom
ruleExpressionAtom returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getExpressionAtomAccess().getExpSignalParserRuleCall_0_0());
				}
				lv_exp_0_0=ruleSignal
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExpressionAtomRule());
					}
					set(
						$current,
						"exp",
						lv_exp_0_0,
						"lu.uni.Socrates.Signal");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			{
				/* */
			}
			{
				newCompositeNode(grammarAccess.getExpressionAtomAccess().getLPARENParserRuleCall_1_0());
			}
			ruleLPAREN
			{
				afterParserOrEnumRuleCall();
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getExpressionAtomAccess().getExpExpressionParserRuleCall_1_1_0());
					}
					lv_exp_2_0=ruleexpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getExpressionAtomRule());
						}
						set(
							$current,
							"exp",
							lv_exp_2_0,
							"lu.uni.Socrates.expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			{
				/* */
			}
			{
				newCompositeNode(grammarAccess.getExpressionAtomAccess().getRPARENParserRuleCall_1_2());
			}
			ruleRPAREN
			{
				afterParserOrEnumRuleCall();
			}
		)
		    |
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getExpressionAtomAccess().getOpSIGNParserRuleCall_2_0_0());
					}
					lv_op_4_0=ruleSIGN
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getExpressionAtomRule());
						}
						set(
							$current,
							"op",
							lv_op_4_0,
							"lu.uni.Socrates.SIGN");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getExpressionAtomAccess().getExpExpressionParserRuleCall_2_1_0());
					}
					lv_exp_5_0=ruleexpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getExpressionAtomRule());
						}
						set(
							$current,
							"exp",
							lv_exp_5_0,
							"lu.uni.Socrates.expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getExpressionAtomAccess().getExpValueParserRuleCall_3_0());
				}
				lv_exp_6_0=rulevalue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExpressionAtomRule());
					}
					set(
						$current,
						"exp",
						lv_exp_6_0,
						"lu.uni.Socrates.value");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleBasicexpression
entryRuleBasicexpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBasicexpressionRule()); }
	iv_ruleBasicexpression=ruleBasicexpression
	{ $current=$iv_ruleBasicexpression.current; }
	EOF;

// Rule Basicexpression
ruleBasicexpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				/* */
			}
			{
				newCompositeNode(grammarAccess.getBasicexpressionAccess().getLPARENParserRuleCall_0_0());
			}
			ruleLPAREN
			{
				afterParserOrEnumRuleCall();
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getBasicexpressionAccess().getExpBasicexpressionParserRuleCall_0_1_0());
					}
					lv_exp_1_0=ruleBasicexpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getBasicexpressionRule());
						}
						set(
							$current,
							"exp",
							lv_exp_1_0,
							"lu.uni.Socrates.Basicexpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			{
				/* */
			}
			{
				newCompositeNode(grammarAccess.getBasicexpressionAccess().getRPARENParserRuleCall_0_2());
			}
			ruleRPAREN
			{
				afterParserOrEnumRuleCall();
			}
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getBasicexpressionAccess().getExpAbsEXPParserRuleCall_1_0());
				}
				lv_exp_3_0=ruleAbsEXP
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBasicexpressionRule());
					}
					set(
						$current,
						"exp",
						lv_exp_3_0,
						"lu.uni.Socrates.AbsEXP");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getBasicexpressionAccess().getExpNormexpParserRuleCall_2_0());
				}
				lv_exp_4_0=ruleNormexp
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBasicexpressionRule());
					}
					set(
						$current,
						"exp",
						lv_exp_4_0,
						"lu.uni.Socrates.Normexp");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getBasicexpressionAccess().getExpSinParserRuleCall_3_0());
				}
				lv_exp_5_0=ruleSin
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBasicexpressionRule());
					}
					set(
						$current,
						"exp",
						lv_exp_5_0,
						"lu.uni.Socrates.Sin");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getBasicexpressionAccess().getExpCosParserRuleCall_4_0());
				}
				lv_exp_6_0=ruleCos
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBasicexpressionRule());
					}
					set(
						$current,
						"exp",
						lv_exp_6_0,
						"lu.uni.Socrates.Cos");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getBasicexpressionAccess().getExpSqrtParserRuleCall_5_0());
				}
				lv_exp_7_0=ruleSqrt
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBasicexpressionRule());
					}
					set(
						$current,
						"exp",
						lv_exp_7_0,
						"lu.uni.Socrates.Sqrt");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRulebasicformulae
entryRulebasicformulae returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBasicformulaeRule()); }
	iv_rulebasicformulae=rulebasicformulae
	{ $current=$iv_rulebasicformulae.current; }
	EOF;

// Rule basicformulae
rulebasicformulae returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getBasicformulaeAccess().getFNegationformulaParserRuleCall_0_0());
				}
				lv_f_0_0=rulenegationformula
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBasicformulaeRule());
					}
					set(
						$current,
						"f",
						lv_f_0_0,
						"lu.uni.Socrates.negationformula");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getBasicformulaeAccess().getFForAllformulaParserRuleCall_1_0());
				}
				lv_f_1_0=ruleforAllformula
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBasicformulaeRule());
					}
					set(
						$current,
						"f",
						lv_f_1_0,
						"lu.uni.Socrates.forAllformula");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getBasicformulaeAccess().getFExistsformulaParserRuleCall_2_0());
				}
				lv_f_2_0=ruleexistsformula
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBasicformulaeRule());
					}
					set(
						$current,
						"f",
						lv_f_2_0,
						"lu.uni.Socrates.existsformula");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleboundterm
entryRuleboundterm returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBoundtermRule()); }
	iv_ruleboundterm=ruleboundterm
	{ $current=$iv_ruleboundterm.current; }
	EOF;

// Rule boundterm
ruleboundterm returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getBoundtermAccess().getRefTvariableParserRuleCall_0_0());
				}
				lv_ref_0_0=ruleTvariable
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBoundtermRule());
					}
					set(
						$current,
						"ref",
						lv_ref_0_0,
						"lu.uni.Socrates.Tvariable");
					afterParserOrEnumRuleCall();
				}
			)
		)
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getBoundtermAccess().getINParserRuleCall_1());
		}
		ruleIN
		{
			afterParserOrEnumRuleCall();
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getBoundtermAccess().getLLSQUAREParserRuleCall_2_0_0());
					}
					lv_l_2_0=ruleLSQUARE
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getBoundtermRule());
						}
						set(
							$current,
							"l",
							lv_l_2_0,
							"lu.uni.Socrates.LSQUARE");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getBoundtermAccess().getLLPARENParserRuleCall_2_1_0());
					}
					lv_l_3_0=ruleLPAREN
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getBoundtermRule());
						}
						set(
							$current,
							"l",
							lv_l_3_0,
							"lu.uni.Socrates.LPAREN");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getBoundtermAccess().getLeftboundTimedtermParserRuleCall_3_0());
				}
				lv_leftbound_4_0=ruletimedterm
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBoundtermRule());
					}
					set(
						$current,
						"leftbound",
						lv_leftbound_4_0,
						"lu.uni.Socrates.timedterm");
					afterParserOrEnumRuleCall();
				}
			)
		)
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getBoundtermAccess().getCOMMAParserRuleCall_4());
		}
		ruleCOMMA
		{
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getBoundtermAccess().getRightboundTimedtermParserRuleCall_5_0());
				}
				lv_rightbound_6_0=ruletimedterm
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBoundtermRule());
					}
					set(
						$current,
						"rightbound",
						lv_rightbound_6_0,
						"lu.uni.Socrates.timedterm");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getBoundtermAccess().getRRSQUAREParserRuleCall_6_0_0());
					}
					lv_r_7_0=ruleRSQUARE
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getBoundtermRule());
						}
						set(
							$current,
							"r",
							lv_r_7_0,
							"lu.uni.Socrates.RSQUARE");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getBoundtermAccess().getRRPARENParserRuleCall_6_1_0());
					}
					lv_r_8_0=ruleRPAREN
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getBoundtermRule());
						}
						set(
							$current,
							"r",
							lv_r_8_0,
							"lu.uni.Socrates.RPAREN");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRuletimedterm
entryRuletimedterm returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTimedtermRule()); }
	iv_ruletimedterm=ruletimedterm
	{ $current=$iv_ruletimedterm.current; }
	EOF;

// Rule timedterm
ruletimedterm returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getTimedtermAccess().getInfINFParserRuleCall_0_0());
				}
				lv_inf_0_0=ruleINF
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTimedtermRule());
					}
					set(
						$current,
						"inf",
						lv_inf_0_0,
						"lu.uni.Socrates.INF");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getTimedtermAccess().getNumberNumberParserRuleCall_1_0());
				}
				lv_number_1_0=rulenumber
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTimedtermRule());
					}
					set(
						$current,
						"number",
						lv_number_1_0,
						"lu.uni.Socrates.number");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				(
					(
						{
							/* */
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getTimedtermRule());
							}
						}
						otherlv_2=RULE_ID
						{
							newLeafNode(otherlv_2, grammarAccess.getTimedtermAccess().getRefConstantIdCrossReference_2_0_0_0());
						}
					)
				)
				    |
				(
					(
						{
							/* */
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getTimedtermRule());
							}
						}
						otherlv_3=RULE_ID
						{
							newLeafNode(otherlv_3, grammarAccess.getTimedtermAccess().getRefTvariableCrossReference_2_0_1_0());
						}
					)
				)
			)
			(
				(
					(
						(
							{
								newCompositeNode(grammarAccess.getTimedtermAccess().getOpPLUSParserRuleCall_2_1_0_0_0());
							}
							lv_op_4_1=rulePLUS
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getTimedtermRule());
								}
								set(
									$current,
									"op",
									lv_op_4_1,
									"lu.uni.Socrates.PLUS");
								afterParserOrEnumRuleCall();
							}
							    |
							{
								newCompositeNode(grammarAccess.getTimedtermAccess().getOpMINUSParserRuleCall_2_1_0_0_1());
							}
							lv_op_4_2=ruleMINUS
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getTimedtermRule());
								}
								set(
									$current,
									"op",
									lv_op_4_2,
									"lu.uni.Socrates.MINUS");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)
				(
					(
						{
							newCompositeNode(grammarAccess.getTimedtermAccess().getValueValueParserRuleCall_2_1_1_0());
						}
						lv_value_5_0=rulevalue
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getTimedtermRule());
							}
							set(
								$current,
								"value",
								lv_value_5_0,
								"lu.uni.Socrates.value");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)?
		)
	)
;

// Entry rule entryRuleatom
entryRuleatom returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAtomRule()); }
	iv_ruleatom=ruleatom
	{ $current=$iv_ruleatom.current; }
	EOF;

// Rule atom
ruleatom returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				/* */
			}
			{
				newCompositeNode(grammarAccess.getAtomAccess().getLPARENParserRuleCall_0_0());
			}
			ruleLPAREN
			{
				afterParserOrEnumRuleCall();
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getAtomAccess().getFFormulaParserRuleCall_0_1_0());
					}
					lv_f_1_0=ruleformula
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAtomRule());
						}
						set(
							$current,
							"f",
							lv_f_1_0,
							"lu.uni.Socrates.formula");
						afterParserOrEnumRuleCall();
					}
				)
			)
			{
				/* */
			}
			{
				newCompositeNode(grammarAccess.getAtomAccess().getRPARENParserRuleCall_0_2());
			}
			ruleRPAREN
			{
				afterParserOrEnumRuleCall();
			}
		)
		    |
		(
			otherlv_3='{'
			{
				newLeafNode(otherlv_3, grammarAccess.getAtomAccess().getLeftCurlyBracketKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getAtomAccess().getS1ExpressionParserRuleCall_1_1_0());
					}
					lv_s1_4_0=ruleexpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAtomRule());
						}
						set(
							$current,
							"s1",
							lv_s1_4_0,
							"lu.uni.Socrates.expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getAtomAccess().getOpRELOPParserRuleCall_1_2_0());
					}
					lv_op_5_0=ruleRELOP
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAtomRule());
						}
						set(
							$current,
							"op",
							lv_op_5_0,
							"lu.uni.Socrates.RELOP");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getAtomAccess().getS2ExpressionParserRuleCall_1_3_0());
					}
					lv_s2_6_0=ruleexpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAtomRule());
						}
						set(
							$current,
							"s2",
							lv_s2_6_0,
							"lu.uni.Socrates.expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_7='}'
			{
				newLeafNode(otherlv_7, grammarAccess.getAtomAccess().getRightCurlyBracketKeyword_1_4());
			}
		)
	)
;

// Entry rule entryRulevalue
entryRulevalue returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getValueRule()); }
	iv_rulevalue=rulevalue
	{ $current=$iv_rulevalue.current; }
	EOF;

// Rule value
rulevalue returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				/* */
			}
			{
				newCompositeNode(grammarAccess.getValueAccess().getLPARENParserRuleCall_0_0());
			}
			ruleLPAREN
			{
				afterParserOrEnumRuleCall();
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getValueAccess().getExpExpressionParserRuleCall_0_1_0());
					}
					lv_exp_1_0=ruleexpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getValueRule());
						}
						set(
							$current,
							"exp",
							lv_exp_1_0,
							"lu.uni.Socrates.expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			{
				/* */
			}
			{
				newCompositeNode(grammarAccess.getValueAccess().getRPARENParserRuleCall_0_2());
			}
			ruleRPAREN
			{
				afterParserOrEnumRuleCall();
			}
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getValueAccess().getNumberNumberParserRuleCall_1_0());
				}
				lv_number_3_0=rulenumber
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getValueRule());
					}
					set(
						$current,
						"number",
						lv_number_3_0,
						"lu.uni.Socrates.number");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					/* */
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getValueRule());
					}
				}
				otherlv_4=RULE_ID
				{
					newLeafNode(otherlv_4, grammarAccess.getValueAccess().getRefConstantIdCrossReference_2_0());
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getValueAccess().getFloatFLOATParserRuleCall_3_0());
				}
				lv_float_5_0=ruleFLOAT
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getValueRule());
					}
					set(
						$current,
						"float",
						lv_float_5_0,
						"lu.uni.Socrates.FLOAT");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleSignal
entryRuleSignal returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSignalRule()); }
	iv_ruleSignal=ruleSignal
	{ $current=$iv_ruleSignal.current; }
	EOF;

// Rule Signal
ruleSignal returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					{
						/* */
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getSignalRule());
						}
					}
					otherlv_0=RULE_ID
					{
						newLeafNode(otherlv_0, grammarAccess.getSignalAccess().getSignalidSignalIDCrossReference_0_0_0());
					}
				)
			)
			{
				/* */
			}
			{
				newCompositeNode(grammarAccess.getSignalAccess().getLPARENParserRuleCall_0_1());
			}
			ruleLPAREN
			{
				afterParserOrEnumRuleCall();
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getSignalAccess().getTimdedtermTimedtermParserRuleCall_0_2_0());
					}
					lv_timdedterm_2_0=ruletimedterm
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSignalRule());
						}
						set(
							$current,
							"timdedterm",
							lv_timdedterm_2_0,
							"lu.uni.Socrates.timedterm");
						afterParserOrEnumRuleCall();
					}
				)
			)
			{
				/* */
			}
			{
				newCompositeNode(grammarAccess.getSignalAccess().getRPARENParserRuleCall_0_3());
			}
			ruleRPAREN
			{
				afterParserOrEnumRuleCall();
			}
		)
		    |
		(
			(
				(
					{
						/* */
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getSignalRule());
						}
					}
					otherlv_4=RULE_ID
					{
						newLeafNode(otherlv_4, grammarAccess.getSignalAccess().getSignalidSignalIDCrossReference_1_0_0());
					}
				)
			)
			{
				/* */
			}
			{
				newCompositeNode(grammarAccess.getSignalAccess().getLSQUAREParserRuleCall_1_1());
			}
			ruleLSQUARE
			{
				afterParserOrEnumRuleCall();
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getSignalAccess().getIndx1NumberParserRuleCall_1_2_0());
					}
					lv_indx1_6_0=rulenumber
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSignalRule());
						}
						set(
							$current,
							"indx1",
							lv_indx1_6_0,
							"lu.uni.Socrates.number");
						afterParserOrEnumRuleCall();
					}
				)
			)
			{
				/* */
			}
			{
				newCompositeNode(grammarAccess.getSignalAccess().getRSQUAREParserRuleCall_1_3());
			}
			ruleRSQUARE
			{
				afterParserOrEnumRuleCall();
			}
			{
				/* */
			}
			{
				newCompositeNode(grammarAccess.getSignalAccess().getLPARENParserRuleCall_1_4());
			}
			ruleLPAREN
			{
				afterParserOrEnumRuleCall();
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getSignalAccess().getTimdedtermTimedtermParserRuleCall_1_5_0());
					}
					lv_timdedterm_9_0=ruletimedterm
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSignalRule());
						}
						set(
							$current,
							"timdedterm",
							lv_timdedterm_9_0,
							"lu.uni.Socrates.timedterm");
						afterParserOrEnumRuleCall();
					}
				)
			)
			{
				/* */
			}
			{
				newCompositeNode(grammarAccess.getSignalAccess().getRPARENParserRuleCall_1_6());
			}
			ruleRPAREN
			{
				afterParserOrEnumRuleCall();
			}
		)
		    |
		(
			(
				(
					{
						/* */
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getSignalRule());
						}
					}
					otherlv_11=RULE_ID
					{
						newLeafNode(otherlv_11, grammarAccess.getSignalAccess().getSignalidSignalIDCrossReference_2_0_0());
					}
				)
			)
			{
				/* */
			}
			{
				newCompositeNode(grammarAccess.getSignalAccess().getLSQUAREParserRuleCall_2_1());
			}
			ruleLSQUARE
			{
				afterParserOrEnumRuleCall();
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getSignalAccess().getIndx1NumberParserRuleCall_2_2_0());
					}
					lv_indx1_13_0=rulenumber
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSignalRule());
						}
						set(
							$current,
							"indx1",
							lv_indx1_13_0,
							"lu.uni.Socrates.number");
						afterParserOrEnumRuleCall();
					}
				)
			)
			{
				/* */
			}
			{
				newCompositeNode(grammarAccess.getSignalAccess().getRSQUAREParserRuleCall_2_3());
			}
			ruleRSQUARE
			{
				afterParserOrEnumRuleCall();
			}
			{
				/* */
			}
			{
				newCompositeNode(grammarAccess.getSignalAccess().getLSQUAREParserRuleCall_2_4());
			}
			ruleLSQUARE
			{
				afterParserOrEnumRuleCall();
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getSignalAccess().getIndx2NumberParserRuleCall_2_5_0());
					}
					lv_indx2_16_0=rulenumber
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSignalRule());
						}
						set(
							$current,
							"indx2",
							lv_indx2_16_0,
							"lu.uni.Socrates.number");
						afterParserOrEnumRuleCall();
					}
				)
			)
			{
				/* */
			}
			{
				newCompositeNode(grammarAccess.getSignalAccess().getRSQUAREParserRuleCall_2_6());
			}
			ruleRSQUARE
			{
				afterParserOrEnumRuleCall();
			}
			{
				/* */
			}
			{
				newCompositeNode(grammarAccess.getSignalAccess().getLPARENParserRuleCall_2_7());
			}
			ruleLPAREN
			{
				afterParserOrEnumRuleCall();
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getSignalAccess().getTimdedtermTimedtermParserRuleCall_2_8_0());
					}
					lv_timdedterm_19_0=ruletimedterm
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSignalRule());
						}
						set(
							$current,
							"timdedterm",
							lv_timdedterm_19_0,
							"lu.uni.Socrates.timedterm");
						afterParserOrEnumRuleCall();
					}
				)
			)
			{
				/* */
			}
			{
				newCompositeNode(grammarAccess.getSignalAccess().getRPARENParserRuleCall_2_9());
			}
			ruleRPAREN
			{
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleAbsEXP
entryRuleAbsEXP returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAbsEXPRule()); }
	iv_ruleAbsEXP=ruleAbsEXP
	{ $current=$iv_ruleAbsEXP.current; }
	EOF;

// Rule AbsEXP
ruleAbsEXP returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='|'
		{
			newLeafNode(otherlv_0, grammarAccess.getAbsEXPAccess().getVerticalLineKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAbsEXPAccess().getExp1ExpressionParserRuleCall_1_0());
				}
				lv_exp1_1_0=ruleexpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAbsEXPRule());
					}
					set(
						$current,
						"exp1",
						lv_exp1_1_0,
						"lu.uni.Socrates.expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='|'
		{
			newLeafNode(otherlv_2, grammarAccess.getAbsEXPAccess().getVerticalLineKeyword_2());
		}
	)
;

// Entry rule entryRuleNormexp
entryRuleNormexp returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNormexpRule()); }
	iv_ruleNormexp=ruleNormexp
	{ $current=$iv_ruleNormexp.current; }
	EOF;

// Rule Normexp
ruleNormexp returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='||'
		{
			newLeafNode(otherlv_0, grammarAccess.getNormexpAccess().getVerticalLineVerticalLineKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getNormexpAccess().getExp1ExpressionParserRuleCall_1_0());
				}
				lv_exp1_1_0=ruleexpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getNormexpRule());
					}
					set(
						$current,
						"exp1",
						lv_exp1_1_0,
						"lu.uni.Socrates.expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='||'
		{
			newLeafNode(otherlv_2, grammarAccess.getNormexpAccess().getVerticalLineVerticalLineKeyword_2());
		}
	)
;

// Entry rule entryRuleSin
entryRuleSin returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSinRule()); }
	iv_ruleSin=ruleSin
	{ $current=$iv_ruleSin.current; }
	EOF;

// Rule Sin
ruleSin returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='sin'
		{
			newLeafNode(otherlv_0, grammarAccess.getSinAccess().getSinKeyword_0());
		}
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getSinAccess().getLPARENParserRuleCall_1());
		}
		ruleLPAREN
		{
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSinAccess().getExp1ExpressionParserRuleCall_2_0());
				}
				lv_exp1_2_0=ruleexpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSinRule());
					}
					set(
						$current,
						"exp1",
						lv_exp1_2_0,
						"lu.uni.Socrates.expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getSinAccess().getRPARENParserRuleCall_3());
		}
		ruleRPAREN
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleCos
entryRuleCos returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCosRule()); }
	iv_ruleCos=ruleCos
	{ $current=$iv_ruleCos.current; }
	EOF;

// Rule Cos
ruleCos returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='cos'
		{
			newLeafNode(otherlv_0, grammarAccess.getCosAccess().getCosKeyword_0());
		}
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getCosAccess().getLPARENParserRuleCall_1());
		}
		ruleLPAREN
		{
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCosAccess().getExp1ExpressionParserRuleCall_2_0());
				}
				lv_exp1_2_0=ruleexpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCosRule());
					}
					set(
						$current,
						"exp1",
						lv_exp1_2_0,
						"lu.uni.Socrates.expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getCosAccess().getRPARENParserRuleCall_3());
		}
		ruleRPAREN
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleSqrt
entryRuleSqrt returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSqrtRule()); }
	iv_ruleSqrt=ruleSqrt
	{ $current=$iv_ruleSqrt.current; }
	EOF;

// Rule Sqrt
ruleSqrt returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='sqrt'
		{
			newLeafNode(otherlv_0, grammarAccess.getSqrtAccess().getSqrtKeyword_0());
		}
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getSqrtAccess().getLPARENParserRuleCall_1());
		}
		ruleLPAREN
		{
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSqrtAccess().getExp1ExpressionParserRuleCall_2_0());
				}
				lv_exp1_2_0=ruleexpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSqrtRule());
					}
					set(
						$current,
						"exp1",
						lv_exp1_2_0,
						"lu.uni.Socrates.expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getSqrtAccess().getRPARENParserRuleCall_3());
		}
		ruleRPAREN
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleFLOAT
entryRuleFLOAT returns [String current=null]:
	{ newCompositeNode(grammarAccess.getFLOATRule()); }
	iv_ruleFLOAT=ruleFLOAT
	{ $current=$iv_ruleFLOAT.current.getText(); }
	EOF;

// Rule FLOAT
ruleFLOAT returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getFLOATAccess().getNumberParserRuleCall_0());
		}
		this_number_0=rulenumber
		{
			$current.merge(this_number_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		kw='.'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getFLOATAccess().getFullStopKeyword_1());
		}
		{
			newCompositeNode(grammarAccess.getFLOATAccess().getNumberParserRuleCall_2());
		}
		this_number_2=rulenumber
		{
			$current.merge(this_number_2);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRulePATH
entryRulePATH returns [String current=null]:
	{ newCompositeNode(grammarAccess.getPATHRule()); }
	iv_rulePATH=rulePATH
	{ $current=$iv_rulePATH.current.getText(); }
	EOF;

// Rule PATH
rulePATH returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				kw='../'
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getPATHAccess().getFullStopFullStopSolidusKeyword_0_0());
				}
			)*
			    |
			kw='./'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getPATHAccess().getFullStopSolidusKeyword_0_1());
			}
		)
		(
			this_ID_2=RULE_ID
			{
				$current.merge(this_ID_2);
			}
			{
				newLeafNode(this_ID_2, grammarAccess.getPATHAccess().getIDTerminalRuleCall_1_0());
			}
			kw='/'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getPATHAccess().getSolidusKeyword_1_1());
			}
		)*
	)
;

// Entry rule entryRulenumber
entryRulenumber returns [String current=null]:
	{ newCompositeNode(grammarAccess.getNumberRule()); }
	iv_rulenumber=rulenumber
	{ $current=$iv_rulenumber.current.getText(); }
	EOF;

// Rule number
rulenumber returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_INT_0=RULE_INT
		{
			$current.merge(this_INT_0);
		}
		{
			newLeafNode(this_INT_0, grammarAccess.getNumberAccess().getINTTerminalRuleCall_0());
		}
		    |
		this_DIGIT_1=RULE_DIGIT
		{
			$current.merge(this_DIGIT_1);
		}
		{
			newLeafNode(this_DIGIT_1, grammarAccess.getNumberAccess().getDIGITTerminalRuleCall_1());
		}
	)
;

// Entry rule entryRuleRELOP
entryRuleRELOP returns [String current=null]:
	{ newCompositeNode(grammarAccess.getRELOPRule()); }
	iv_ruleRELOP=ruleRELOP
	{ $current=$iv_ruleRELOP.current.getText(); }
	EOF;

// Rule RELOP
ruleRELOP returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getRELOPAccess().getGEParserRuleCall_0());
		}
		this_GE_0=ruleGE
		{
			$current.merge(this_GE_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getRELOPAccess().getLEParserRuleCall_1());
		}
		this_LE_1=ruleLE
		{
			$current.merge(this_LE_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getRELOPAccess().getEQParserRuleCall_2());
		}
		this_EQ_2=ruleEQ
		{
			$current.merge(this_EQ_2);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getRELOPAccess().getLEQParserRuleCall_3());
		}
		this_LEQ_3=ruleLEQ
		{
			$current.merge(this_LEQ_3);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getRELOPAccess().getGEQParserRuleCall_4());
		}
		this_GEQ_4=ruleGEQ
		{
			$current.merge(this_GEQ_4);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getRELOPAccess().getNEQParserRuleCall_5());
		}
		this_NEQ_5=ruleNEQ
		{
			$current.merge(this_NEQ_5);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleCOMMA
entryRuleCOMMA returns [String current=null]:
	{ newCompositeNode(grammarAccess.getCOMMARule()); }
	iv_ruleCOMMA=ruleCOMMA
	{ $current=$iv_ruleCOMMA.current.getText(); }
	EOF;

// Rule COMMA
ruleCOMMA returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw=','
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getCOMMAAccess().getCommaKeyword());
	}
;

// Entry rule entryRuleLE
entryRuleLE returns [String current=null]:
	{ newCompositeNode(grammarAccess.getLERule()); }
	iv_ruleLE=ruleLE
	{ $current=$iv_ruleLE.current.getText(); }
	EOF;

// Rule LE
ruleLE returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='<'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getLEAccess().getLessThanSignKeyword());
	}
;

// Entry rule entryRuleLEQ
entryRuleLEQ returns [String current=null]:
	{ newCompositeNode(grammarAccess.getLEQRule()); }
	iv_ruleLEQ=ruleLEQ
	{ $current=$iv_ruleLEQ.current.getText(); }
	EOF;

// Rule LEQ
ruleLEQ returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='<='
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getLEQAccess().getLessThanSignEqualsSignKeyword());
	}
;

// Entry rule entryRuleGE
entryRuleGE returns [String current=null]:
	{ newCompositeNode(grammarAccess.getGERule()); }
	iv_ruleGE=ruleGE
	{ $current=$iv_ruleGE.current.getText(); }
	EOF;

// Rule GE
ruleGE returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='>'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getGEAccess().getGreaterThanSignKeyword());
	}
;

// Entry rule entryRuleGEQ
entryRuleGEQ returns [String current=null]:
	{ newCompositeNode(grammarAccess.getGEQRule()); }
	iv_ruleGEQ=ruleGEQ
	{ $current=$iv_ruleGEQ.current.getText(); }
	EOF;

// Rule GEQ
ruleGEQ returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='>='
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getGEQAccess().getGreaterThanSignEqualsSignKeyword());
	}
;

// Entry rule entryRuleEQ
entryRuleEQ returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEQRule()); }
	iv_ruleEQ=ruleEQ
	{ $current=$iv_ruleEQ.current.getText(); }
	EOF;

// Rule EQ
ruleEQ returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='='
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getEQAccess().getEqualsSignKeyword());
	}
;

// Entry rule entryRuleNEQ
entryRuleNEQ returns [String current=null]:
	{ newCompositeNode(grammarAccess.getNEQRule()); }
	iv_ruleNEQ=ruleNEQ
	{ $current=$iv_ruleNEQ.current.getText(); }
	EOF;

// Rule NEQ
ruleNEQ returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='!='
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getNEQAccess().getExclamationMarkEqualsSignKeyword());
	}
;

// Entry rule entryRuleLPAREN
entryRuleLPAREN returns [String current=null]:
	{ newCompositeNode(grammarAccess.getLPARENRule()); }
	iv_ruleLPAREN=ruleLPAREN
	{ $current=$iv_ruleLPAREN.current.getText(); }
	EOF;

// Rule LPAREN
ruleLPAREN returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='('
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getLPARENAccess().getLeftParenthesisKeyword());
	}
;

// Entry rule entryRuleRPAREN
entryRuleRPAREN returns [String current=null]:
	{ newCompositeNode(grammarAccess.getRPARENRule()); }
	iv_ruleRPAREN=ruleRPAREN
	{ $current=$iv_ruleRPAREN.current.getText(); }
	EOF;

// Rule RPAREN
ruleRPAREN returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw=')'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getRPARENAccess().getRightParenthesisKeyword());
	}
;

// Entry rule entryRuleLSQUARE
entryRuleLSQUARE returns [String current=null]:
	{ newCompositeNode(grammarAccess.getLSQUARERule()); }
	iv_ruleLSQUARE=ruleLSQUARE
	{ $current=$iv_ruleLSQUARE.current.getText(); }
	EOF;

// Rule LSQUARE
ruleLSQUARE returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='['
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getLSQUAREAccess().getLeftSquareBracketKeyword());
	}
;

// Entry rule entryRuleRSQUARE
entryRuleRSQUARE returns [String current=null]:
	{ newCompositeNode(grammarAccess.getRSQUARERule()); }
	iv_ruleRSQUARE=ruleRSQUARE
	{ $current=$iv_ruleRSQUARE.current.getText(); }
	EOF;

// Rule RSQUARE
ruleRSQUARE returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw=']'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getRSQUAREAccess().getRightSquareBracketKeyword());
	}
;

// Entry rule entryRuleNOT
entryRuleNOT returns [String current=null]:
	{ newCompositeNode(grammarAccess.getNOTRule()); }
	iv_ruleNOT=ruleNOT
	{ $current=$iv_ruleNOT.current.getText(); }
	EOF;

// Rule NOT
ruleNOT returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='not'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getNOTAccess().getNotKeyword());
	}
;

// Entry rule entryRuleFORALL
entryRuleFORALL returns [String current=null]:
	{ newCompositeNode(grammarAccess.getFORALLRule()); }
	iv_ruleFORALL=ruleFORALL
	{ $current=$iv_ruleFORALL.current.getText(); }
	EOF;

// Rule FORALL
ruleFORALL returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='forall'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getFORALLAccess().getForallKeyword());
	}
;

// Entry rule entryRuleEXISTS
entryRuleEXISTS returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEXISTSRule()); }
	iv_ruleEXISTS=ruleEXISTS
	{ $current=$iv_ruleEXISTS.current.getText(); }
	EOF;

// Rule EXISTS
ruleEXISTS returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='exists'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getEXISTSAccess().getExistsKeyword());
	}
;

// Entry rule entryRuleCONJ
entryRuleCONJ returns [String current=null]:
	{ newCompositeNode(grammarAccess.getCONJRule()); }
	iv_ruleCONJ=ruleCONJ
	{ $current=$iv_ruleCONJ.current.getText(); }
	EOF;

// Rule CONJ
ruleCONJ returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='and'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getCONJAccess().getAndKeyword());
	}
;

// Entry rule entryRuleDISJ
entryRuleDISJ returns [String current=null]:
	{ newCompositeNode(grammarAccess.getDISJRule()); }
	iv_ruleDISJ=ruleDISJ
	{ $current=$iv_ruleDISJ.current.getText(); }
	EOF;

// Rule DISJ
ruleDISJ returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='or'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getDISJAccess().getOrKeyword());
	}
;

// Entry rule entryRuleIMPL
entryRuleIMPL returns [String current=null]:
	{ newCompositeNode(grammarAccess.getIMPLRule()); }
	iv_ruleIMPL=ruleIMPL
	{ $current=$iv_ruleIMPL.current.getText(); }
	EOF;

// Rule IMPL
ruleIMPL returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='implies'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getIMPLAccess().getImpliesKeyword());
	}
;

// Entry rule entryRuleBICOND
entryRuleBICOND returns [String current=null]:
	{ newCompositeNode(grammarAccess.getBICONDRule()); }
	iv_ruleBICOND=ruleBICOND
	{ $current=$iv_ruleBICOND.current.getText(); }
	EOF;

// Rule BICOND
ruleBICOND returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='iff'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getBICONDAccess().getIffKeyword());
	}
;

// Entry rule entryRuleINF
entryRuleINF returns [String current=null]:
	{ newCompositeNode(grammarAccess.getINFRule()); }
	iv_ruleINF=ruleINF
	{ $current=$iv_ruleINF.current.getText(); }
	EOF;

// Rule INF
ruleINF returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='inf'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getINFAccess().getInfKeyword());
	}
;

// Entry rule entryRuleIN
entryRuleIN returns [String current=null]:
	{ newCompositeNode(grammarAccess.getINRule()); }
	iv_ruleIN=ruleIN
	{ $current=$iv_ruleIN.current.getText(); }
	EOF;

// Rule IN
ruleIN returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='in'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getINAccess().getInKeyword());
	}
;

// Entry rule entryRulePLUS
entryRulePLUS returns [String current=null]:
	{ newCompositeNode(grammarAccess.getPLUSRule()); }
	iv_rulePLUS=rulePLUS
	{ $current=$iv_rulePLUS.current.getText(); }
	EOF;

// Rule PLUS
rulePLUS returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='+'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getPLUSAccess().getPlusSignKeyword());
	}
;

// Entry rule entryRuleMINUS
entryRuleMINUS returns [String current=null]:
	{ newCompositeNode(grammarAccess.getMINUSRule()); }
	iv_ruleMINUS=ruleMINUS
	{ $current=$iv_ruleMINUS.current.getText(); }
	EOF;

// Rule MINUS
ruleMINUS returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='-'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getMINUSAccess().getHyphenMinusKeyword());
	}
;

// Entry rule entryRuleCOLON
entryRuleCOLON returns [String current=null]:
	{ newCompositeNode(grammarAccess.getCOLONRule()); }
	iv_ruleCOLON=ruleCOLON
	{ $current=$iv_ruleCOLON.current.getText(); }
	EOF;

// Rule COLON
ruleCOLON returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw=':'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getCOLONAccess().getColonKeyword());
	}
;

// Entry rule entryRuleSIGN
entryRuleSIGN returns [String current=null]:
	{ newCompositeNode(grammarAccess.getSIGNRule()); }
	iv_ruleSIGN=ruleSIGN
	{ $current=$iv_ruleSIGN.current.getText(); }
	EOF;

// Rule SIGN
ruleSIGN returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getSIGNAccess().getPLUSParserRuleCall_0());
		}
		this_PLUS_0=rulePLUS
		{
			$current.merge(this_PLUS_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getSIGNAccess().getMINUSParserRuleCall_1());
		}
		this_MINUS_1=ruleMINUS
		{
			$current.merge(this_MINUS_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

RULE_DESCRIPTION : '"' ( options {greedy=false;} : . )*'"';

RULE_WS : (' '|'\t'|'\r'|'\n');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_DIGIT : '0'..'9';

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_ANY_OTHER : .;

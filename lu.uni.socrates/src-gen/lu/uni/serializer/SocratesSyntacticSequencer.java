/*
 * generated by Xtext 2.17.0.M1
 */
package lu.uni.serializer;

import com.google.inject.Inject;
import java.util.List;
import lu.uni.services.SocratesGrammarAccess;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;

@SuppressWarnings("all")
public class SocratesSyntacticSequencer extends AbstractSyntacticSequencer {

	protected SocratesGrammarAccess grammarAccess;
	protected AbstractElementAlias match_ConstantDefinition_SIGNParserRuleCall_2_q;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (SocratesGrammarAccess) access;
		match_ConstantDefinition_SIGNParserRuleCall_2_q = new TokenAlias(false, true, grammarAccess.getConstantDefinitionAccess().getSIGNParserRuleCall_2());
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (ruleCall.getRule() == grammarAccess.getCOLONRule())
			return getCOLONToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getCOMMARule())
			return getCOMMAToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getDESCRIPTIONRule())
			return getDESCRIPTIONToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getEQRule())
			return getEQToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getEXISTSRule())
			return getEXISTSToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getFORALLRule())
			return getFORALLToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getINRule())
			return getINToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getLPARENRule())
			return getLPARENToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getLSQUARERule())
			return getLSQUAREToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getNOTRule())
			return getNOTToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getRPARENRule())
			return getRPARENToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getRSQUARERule())
			return getRSQUAREToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getSIGNRule())
			return getSIGNToken(semanticObject, ruleCall, node);
		return "";
	}
	
	/**
	 * COLON:
	 * 	':';
	 */
	protected String getCOLONToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return ":";
	}
	
	/**
	 * COMMA:
	 * 	',';
	 */
	protected String getCOMMAToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return ",";
	}
	
	/**
	 * terminal DESCRIPTION:
	 * 	'"'->'"';
	 */
	protected String getDESCRIPTIONToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "\"";
	}
	
	/**
	 * EQ:
	 * 	'=';
	 */
	protected String getEQToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "=";
	}
	
	/**
	 * EXISTS:
	 * 	'exists';
	 */
	protected String getEXISTSToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "exists";
	}
	
	/**
	 * FORALL:
	 * 	'forall';
	 */
	protected String getFORALLToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "forall";
	}
	
	/**
	 * IN:
	 * 	'in';
	 */
	protected String getINToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "in";
	}
	
	/**
	 * LPAREN:
	 * 	'(';
	 */
	protected String getLPARENToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "(";
	}
	
	/**
	 * LSQUARE:
	 * 	'[';
	 */
	protected String getLSQUAREToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "[";
	}
	
	/**
	 * NOT:
	 * 	'not';
	 */
	protected String getNOTToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "not";
	}
	
	/**
	 * RPAREN:
	 * 	')';
	 */
	protected String getRPARENToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return ")";
	}
	
	/**
	 * RSQUARE:
	 * 	']';
	 */
	protected String getRSQUAREToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "]";
	}
	
	/**
	 * SIGN:
	 * 	PLUS | MINUS;
	 */
	protected String getSIGNToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "+";
	}
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_ConstantDefinition_SIGNParserRuleCall_2_q.equals(syntax))
				emit_ConstantDefinition_SIGNParserRuleCall_2_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     SIGN?
	 *
	 * This ambiguous syntax occurs at:
	 *     constantid=ConstantId EQ (ambiguity) value=number
	 */
	protected void emit_ConstantDefinition_SIGNParserRuleCall_2_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
